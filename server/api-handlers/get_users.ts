// GET /users

import { Author, GetUsersRequest, SignatureLimit } from "../common/server-api";
import { Prisma } from "@prisma/client";
import { RequestHandler } from "express";
import { Services } from "../types";

export function getUsers({ prisma }: Services): RequestHandler {
  return async (req, res) => {
    try {
      const { offset } = req.query as unknown as GetUsersRequest;

      // TODO: validate request, maybe use autogenerated zod

      const authors = await prisma.user.findMany({
        orderBy: [{ createdAt: "asc" }],
        take: SignatureLimit,
        skip: offset,
      });

      res.json(
        authors.map((author) => ({ ...author, walletId: author.id } as Author))
      );
    } catch (err) {
      console.log(err);
      if (err instanceof Prisma.PrismaClientValidationError) {
        res
          .status(400)
          .json({ error: `Received invalid data. ${err.message}` });
        return;
      }
      res.status(400).json({ error: err.message });
    }
  };
}
