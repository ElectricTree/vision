// GET /contribution/:id

import { GetContributionRequest, Contribution } from "@common/server-api";
import { Prisma } from "@prisma/client";
import { RequestHandler } from "express";
import { Services } from "../types";

export function getContribution({ prisma }: Services): RequestHandler {
  return async (req, res) => {
    try {
      const params = req.params as unknown as GetContributionRequest;
      const id = Number(params.id);

      // TODO: validate request, maybe use autogenerated zod

      const contribution = await prisma.contribution.findFirst({
        where: { id },
        include: {
          author: true,
        },
      });

      res.json({
        ...contribution,
        author: { ...contribution.author, walletId: contribution.author.id },
      } as Contribution);
    } catch (err) {
      console.log(err);
      if (err instanceof Prisma.PrismaClientValidationError) {
        res
          .status(400)
          .json({ error: `Received invalid data. ${err.message}` });
        return;
      }
      res.status(400).json({ error: err.message });
    }
  };
}
